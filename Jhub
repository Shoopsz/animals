package createAnimal;

import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;

public class Hub {
	Scanner sc = new Scanner(System.in);
	Animal randomAnimal[] = new Animal[3];
	List<Animal> animalList;
	List<Dog> dogList = new ArrayList<Dog>();
	List<Parrot> parrotList = new ArrayList<Parrot>();
	List<Elephant> elephantList = new ArrayList<>();
	Dog dog;
	Parrot parrot;
	Elephant elephant;
	int day = 0;

	public Hub() {
		dog = new Dog();
		parrot = new Parrot();
		elephant = new Elephant();
		animalList = new ArrayList<Animal>();
		System.out.println("System online\n");
		manageAnimal();
	}

	// main menu
	public void manageAnimal() {
		int choice;
		boolean addMore = true;

		do {
			System.out.println("Press 1: To add animal");
			System.out.println("Press 2: Schedule for animals");
			System.out.println("Press 3: Show animals information");
			System.out.println("Press 4: To sort animal");
			System.out.println("Press 5: To exist");
			choice = sc.nextInt();
			;
			switch (choice) {
			case 1:
				addAnimal();
				break;
			case 2:
				schedule();
				break;
			case 3:
				dog.printValues(animalList);
				break;
			case 4:
				sortAnimal();
				break;
			case 5:
				addMore = false;
				break;
			default:
				System.out.println("Invalid input!");
				break;
			}
		} while (addMore);
	}

	private void addAnimal() {
		System.out.println("Enter amount of animal to add");
		int amountAnimal = sc.nextInt();
		int i;
		// create random animal
		for (i = 0; i < amountAnimal; i++) {
			animalList.add(randomizeAnimal(randomName()));
		}
		// categorize animal, dog, parrot, elephant.
		for (int j = 0; j < animalList.size(); j++) {
			// if animalList contain dog, add to dogList
			if (animalList.get(j).getSound().equals("woof-woof")) {
				dogList.add((Dog) animalList.get(j));
				// if animalList contain parrot, add to parrotList
			} else if (animalList.get(j).getSound().equals("tweet-tweet")) {
				parrotList.add((Parrot) animalList.get(j));
				// if animalList contain elephant, add to elephant
			} else if (animalList.get(j).getSound().equals("Pawoo")) {
				elephantList.add((Elephant) animalList.get(j));
			}
		}
	}

	private Animal randomizeAnimal(String name) {

		// create dog,parrot,elephant in randomAnimal array.
		randomAnimal[0] = new Dog("woof-woof", name, roundNum(randomNum(35, 1)), roundNum(randomNum(0.3, 1)),
				(int) randomNum(1, 15), (int) randomNum(23, 42));
		randomAnimal[1] = new Parrot("tweet-tweet", name, roundNum(randomNum(0.5, 4)), roundNum(randomNum(0.5, 2)),
				(int) randomNum(1, 95), (int) randomNum(7, 12));
		randomAnimal[2] = new Elephant("Pawoo", name, roundNum(randomNum(3000, 700)), roundNum(randomNum(2, 4)),
				(int) randomNum(1, 70), (int) randomNum(30, 50));
		// return a random animal from array.
		return randomAnimal[(int) randomNum(0, 2)];
	}

	// schedule for animal
	private void schedule() {
		System.out.println("Schedule for all animals\n");
		System.out.println("Enter how many days for the schedule");
		int input = sc.nextInt();
		// call feedAndActivity() method to handle feeding, activity and call time() to
		// handle animal aging.
		for (int i = 1; i <= input; i++) {
			day++;
			System.out.println("Day: " + day + "\n");
			feedAndActivity();
			time();
		}
	}

	private void feedAndActivity() {
		System.out.println("Let's feed the animal!");
		// display how much food there are before feeding animal
		System.out.println(
				"Before refill animals food: " + "\nDogs food have:  " + dog.dogFood + " unit" + "\nParrots food have: "
						+ parrot.seeds + " unit" + "\nelephant has: " + elephant.bananas + " bananas\n");
		// loop through animalList with foreach loop.
		for (Animal animal : animalList) {
			// while costPerDay of animal is not enough, return false. Add the food until
			// cosPerDay return true when the food is enough.
			while (!costPerDay(animal)) {
				// if the animal is dog
				if (animal.getSound().equals("woof-woof")) {
					System.out.println("Dog eat " + animal.getEat() + " unit");
					System.out.println("Before refill dogs food has " + dog.dogFood + " unit");
					dog.moreDogFood();
					System.out.println("After refill dog foods " + dog.dogFood + "unit");
					System.out.println("dogs food: " + dog.dogFood + " unit");
					// if the animal is parrot
				} else if (animal.getSound().equals("tweet-tweet")) {
					System.out.println("Parrot eat " + animal.getEat() + " unit");
					System.out.println("Before refill parrots seed has " + parrot.seeds + " unit");
					parrot.moreSeeds();
					System.out.println("After refill parrot food " + parrot.seeds + " unit");
					System.out.println("parrots seeds: " + parrot.seeds + " unit");
					// if the animal is elephant
				} else if (animal.getSound().equals("Pawoo")) {
					System.out.println("Elephant eat " + animal.getEat() + " bananas");
					System.out.println("Before refill elephant bananas has " + elephant.bananas + " bananas");
					elephant.moreBananas();
					System.out.println("After refill elephant food " + elephant.bananas + " bananas");
					System.out.println("elephants bananas: " + elephant.bananas + " bananas");
				}
			}
			// if the food is enough. Minus amount of food with the amount of animal consume
			// to get the remaining food.
			if (animal.getSound().equals("woof-woof")) {
				System.out.println("Enough food for dog");
				dog.dogFood -= animal.getEat();
				System.out.println("After eating, left over dogs food :" + dog.dogFood + " unit\n");
			}
			if (animal.getSound().equals("tweet-tweet")) {
				System.out.println("Enough food for parrot");
				parrot.seeds -= animal.getEat();
				System.out.println("After eating, left over seed :" + parrot.seeds + " unit\n");
			}
			if (animal.getSound().equals("Pawoo")) {
				System.out.println("Enough food for elephant");
				elephant.bananas -= animal.getEat();
				System.out.println("After eating, left over bananas :" + elephant.bananas + " bananas\n");
			}
			//
			if (!activity(animal)) {
				if (animal.getSound().equals("woof-woof")) {
					System.out.println("Dog got new chew Toy\n");
					dog.chewToy = dog.newChewToy();
				} else if (animal.getSound().equals("tweet-tweet")) {
					parrot.flying = parrot.fly();
					System.out.println("It is day to let parrot fly");
					System.out.println("Parrot is flying ");
					System.out.println("Parrot land\n");
					parrot.flying = parrot.land();

				} else if (animal.getSound().equals("Pawoo")) {
					System.out.println("Elephant take a bath\n");
					elephant.bathed = elephant.bath();
				}
			}
		}
	}

	private boolean costPerDay(Animal animal) {
		// if false, refill food
		if (animal.getSound().equals("woof-woof") && animal.getEat() > dog.dogFood) {
			System.out.println("\nNot enough dog food, please refill");
			return false;
		}

		else if (animal.getSound().equals("tweet-tweet") && animal.getEat() > parrot.seeds) {
			System.out.println("\nNot enough parrot food, please refill");
			return false;
		}

		else if (animal.getSound().equals("Pawoo") && animal.getEat() > elephant.bananas) {
			System.out.println("\nNot enough elephant food, please refill");
			return false;
		}
		return true;
	}

	// activities for animals
	private boolean activity(Animal animal) {
		// if false, get a new chew toy.
		// give dog new toy on every fifth day
		if (animal.getSound().equals("woof-woof") && dog.chewToy == false && day == 1
				|| animal.getSound().equals("Dog") && dog.chewToy == false && day % 5 == 0) {
			System.out.println("It is time for new chews toy");
			System.out.println("Give new chews toy");
			dog.chewToy = dog.newChewToy();
			return false;
		}
		// if false, let the parrot fly
		// Parrot flies on days that divided with 2 or 3
		if (animal.getSound().equals("tweet-tweet") && parrot.flying == false && day % 2 == 0
				|| animal.getSound().equals("Parrot") && parrot.flying == false && day % 3 == 0) {
			System.out.println("It is time for activity");
			return false;
		}
		// if false, let the elephant take bathed
		// Elephant take bath on every other day.
		if (animal.getSound().equals("Pawoo") && elephant.bathed == false && day % 2 != 0) {
			System.out.println("It is day for elephant to take bath");
			elephant.bathed = elephant.bath();
			return false;
		}
		return true;
	}

	// animal aging.
	private void time() {
		for (Animal a : animalList) {
			// after 365 days animal age increase by 1
			if (day % 365 == 0) {
				a.setAge(a.getAge() + 1);
			}
		}
		// using iterator to remove object from list to avoid
		// ConcurrentModificationException.
		// iterator() method of an ArrayList returns an instance of java.util.Iterator
		// which can be used to loop over the items of the list and it has
		// hasNext() method which returns true if there are more elements to iterate in
		// the list and its next() method returns the next element in iteration.

		// a animalList is equal to a list of animal.
		for (Iterator<Animal> Listiterator = animalList.iterator(); Listiterator.hasNext();) {
			// loop over the list using iterator
			Animal a = Listiterator.next();
			// remove animal from cell if one of the condition is true.
			if (a.getSound().equals("woof-woof") && a.getAge() == dog.maxAge
					|| a.getSound().equals("tweet-tweet") && a.getAge() == parrot.maxAge
					|| a.getSound().equals("Pawoo") && a.getAge() == elephant.maxAge) {
				System.out.println("Age before remove " + a.getAge());
				Listiterator.remove();
			}
		}
	}

	// Sort dog, parrot and elephant
	private void sortAnimal() {
		System.out.println("Search for the most beautiful animal from each category");
		System.out.println("Press 1: Find the best dog");
		System.out.println("Press 2: Find the best parrot");
		System.out.println("Press 3: Find the best elephant\n");
		int choice = sc.nextInt();
		switch (choice) {
		case 1:
			sortDog();
			break;
		case 2:
			sortParrot();
			break;
		case 3:
			sortElephant();
			break;
		default:
			System.out.println("Invalid input!");
			break;

		}
	}

	// Sort animal age

	// because the animal does not have a natural order and animal does not
	// implement the comparable interface.
	// To sort the object field, the comparator object will be create where it
	// stores the animals.

	// reverse sorting, from big to small. swap a2 to a1 if a2>a1 return -1 else if
	// a2<a1 return 1 else return 0 when a2=a1. 
	private void sortDog() {

		Collections.sort(dogList, new Comparator<Animal>() {
			@Override
			public int compare(Animal a1, Animal a2) {
				int compare = 0;
				// compare weight a2 and a1
				compare = Double.valueOf(a2.getWeight()).compareTo(a1.getWeight());
				// if a2=a1 continue compare height and age
				if (compare == 0) {
					compare = Double.valueOf(a2.getHeight()).compareTo(a1.getHeight());
					if (compare == 0) {
						compare = Integer.valueOf(a2.getAge()).compareTo(a1.getAge());
						if (compare == 0)
							return compare;
					}
				}
				return compare;
			}
		});
		// print out the list
		for (Dog dog : dogList) {
			System.out.println("Name: " + dog.getName() + " Sound : " + dog.getSound() + " Age: " + dog.getAge()
					+ " year old" + " Height: " + dog.getHeight() + "m" + " Weight: " + dog.getWeight() + "kg" + "\n");
		}
		// print out the most beautiful in the list
		System.out.println(dogList.get(0).getName() + " is the most beatiful dog in dogs category\n");
	}

	private void sortParrot() {

		Collections.sort(parrotList, new Comparator<Animal>() {
			@Override
			public int compare(Animal a1, Animal a2) {
				int compare = 0;
				compare = Double.valueOf(a2.getWeight()).compareTo(a1.getWeight());
				if (compare == 0) {
					compare = Double.valueOf(a2.getHeight()).compareTo(a1.getHeight());
					if (compare == 0) {
						compare = Integer.valueOf(a2.getAge()).compareTo(a1.getAge());
						if (compare == 0)
							return compare;
					}
				}
				return compare;
			}
		});
		for (Parrot parrot : parrotList) {
			System.out.println("Name: " + parrot.getName() + " Type: " + parrot.getSound() + " Age: " + parrot.getAge()
					+ " year old" + " Height: " + parrot.getHeight() + "m" + " Weight: " + parrot.getWeight() + "kg"
					+ "\n");
		}
		System.out.println(parrotList.get(0).getName() + " is the most beatiful parrot in parrots category\n");
	}

	private void sortElephant() {
		
		Collections.sort(elephantList, new Comparator<Animal>() {
			@Override
			public int compare(Animal a1, Animal a2) {
				int compare = 0;
				compare = Double.valueOf(a2.getWeight()).compareTo(a1.getWeight());
				if (compare == 0) {
					compare = Double.valueOf(a2.getHeight()).compareTo(a1.getHeight());
					if (compare == 0) {
						compare = Integer.valueOf(a2.getAge()).compareTo(a1.getAge());
						if (compare == 0)
							return compare;
					}
				}
				return compare;
			}
		});
		for (Elephant elephant : elephantList) {
			System.out.println("Name: " + elephant.getName() + " Type: " + elephant.getSound() + " Age: "
					+ elephant.getAge() + " year old" + " Height: " + elephant.getHeight() + "m" + " Weight: "
					+ elephant.getWeight() + "kg" + "\n");
		}
		System.out.println(elephantList.get(0).getName() + " is the most beatiful elephant in elephants category\n");
	}

	// random a name
	private String randomName() {
		String temp = "";
		int maxCha = 90;
		int minCha = 65;

		for (int i = 0; i < 10; i++) {

			if (i != 5)
				temp += (char) (Math.random() * (maxCha - minCha + 1) + minCha);
			else
				temp += (char) 32;
		}
		return temp;
	}

	// Get random number
	private double randomNum(double min, double max) {

		return (Math.random() * ((max - min) + 1)) + min;
	}

	// round number to first decimal
	private double roundNum(double value) {

		return Math.round(value * 10) / 10.0;
	}

}
